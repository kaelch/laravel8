<?php

namespace Tests\Unit;

use App\Exceptions\PreconditionException;
use App\Services\CalculatePointService;
use PHPUnit\Framework\TestCase;
class CalculatePointServiceTest extends TestCase
{
    /**~
     *  @test
     *  @dataProvider dataProvider_for_calcPoint
     */
    public function calcPoint(int $expected, int $amount)
    {
        \Log::Debug($expected);
        \Log::Debug($amount);
    }

    public function dataProvider_for_calcPoint(): array
    {
        return [
            [0, 0],
            [0, 9999],
            [0, 10000]
        ];
    }

    public static function setUpBeforeClass(): void
    {
        parent::setUpBeforeClass(); // TODO: Change the autogenerated stub
        echo __METHOD__, PHP_EOL;
    }

    public function setUp(): void
    {
        parent::setUp(); // TODO: Change the autogenerated stub
        echo __METHOD__, PHP_EOL;
    }

    public function tearDown(): void
    {
        parent::tearDown(); // TODO: Change the autogenerated stub
        echo __METHOD__, PHP_EOL;
    }

    public static function tearDownAfterClass(): void
    {
        parent::tearDownAfterClass(); // TODO: Change the autogenerated stub
        echo __METHOD__, PHP_EOL;
    }

    /**
     * @test
     */
    public function calcPoint_throw_exception_below_0()
    {
        $this->expectException(PreconditionException::class);
        $this->expectExceptionMessage('구매 금액이 음수');
        CalculatePointService::calcPoint(-1);

    }

    /**
     * @test
     */
    public function exception_try_catch()
    {
        try{
            throw new \InvalidArgumentException('message', 200);
            $this->fail();
        }catch (\Throwable $e) {
            $this->assertInstanceOf(\InvalidArgumentException::class, $e);

            $this->assertSame(200, $e->getCode());

            $this->assertSame('message', $e->getMessage());
        }
    }

    /**
     * @test
     */
    public function exception_expectException_method()
    {
        $this->expectException(\InvalidArgumentException::class);

        $this->expectDeprecationMessage('message');

        throw new \InvalidArgumentException('message', 200);
    }
}
